return(output)
Sys.sleep(1) #
}
aa[1]
genome_info_sp_NIH("Anguilla japonica")
#-------------------------------------------------------------------------
#Scraping information of genome-assembly of a target species using rentrez
genome_info_sp_NIH <- function(scientific_name){
scientific_name_vec <- strsplit(scientific_name,"\\s+")
browser()
species <- scientific_name_vec[1]
genus <- scientific_name_vec[2]
query_species_lab <- paste0(genus," ",species,"[Organism]")
spp_genome_info <- entrez_search(db="assembly", term =query_species_lab)
no_assembly <- spp_genome_info$count
if(no_assembly > 1){
spp_genome_info_list <- entrez_summary(db="assembly", id=spp_genome_info$ids)
for(i in 1:no_assembly){
if(spp_genome_info_list[[i]]$refseq_category=="representative genome"){
representative_sp_genome <- spp_genome_info_list[[i]] #Primary genome-assembly
representative_sp_genome_accession <- spp_genome_info_list[[i]]$assemblyaccession
#extracting genome size info: the object "representative_sp_genome$meta" includes genome size etc.
representative_meta <- unlist(strsplit( representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}
}
}else if(no_assembly == 1){
representative_sp_genome <- entrez_summary(db="assembly", id=spp_genome_info$ids)
representative_sp_genome_accession <- representative_sp_genome$assemblyaccession
#extracting genome size info
representative_meta <- unlist(strsplit(representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}else{#(no_assembly == 0)
representative_sp_genome <- NA
representative_sp_genome_accession <- NA
representative_genome_size <- NA
}
output <- list(no_assembly,representative_sp_genome,representative_sp_genome_accession, representative_genome_size)
return(output)
Sys.sleep(1) #
}
genome_info_sp_NIH("Anguilla japonica")
scientific_name_vec
scientific_name_vec[1]
unlist(scientific_name_vec[1])
unlist(scientific_name_vec[1])[1]
unlist(scientific_name_vec[1])[2]
#-------------------------------------------------------------------------
#Scraping information of genome-assembly of a target species using rentrez
genome_info_sp_NIH <- function(scientific_name){
scientific_name_vec <- unlist(strsplit(scientific_name,"\\s+"))
#  browser()
species <- scientific_name_vec[1]
genus <- scientific_name_vec[2]
query_species_lab <- paste0(genus," ",species,"[Organism]")
spp_genome_info <- entrez_search(db="assembly", term =query_species_lab)
no_assembly <- spp_genome_info$count
if(no_assembly > 1){
spp_genome_info_list <- entrez_summary(db="assembly", id=spp_genome_info$ids)
for(i in 1:no_assembly){
if(spp_genome_info_list[[i]]$refseq_category=="representative genome"){
representative_sp_genome <- spp_genome_info_list[[i]] #Primary genome-assembly
representative_sp_genome_accession <- spp_genome_info_list[[i]]$assemblyaccession
#extracting genome size info: the object "representative_sp_genome$meta" includes genome size etc.
representative_meta <- unlist(strsplit( representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}
}
}else if(no_assembly == 1){
representative_sp_genome <- entrez_summary(db="assembly", id=spp_genome_info$ids)
representative_sp_genome_accession <- representative_sp_genome$assemblyaccession
#extracting genome size info
representative_meta <- unlist(strsplit(representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}else{#(no_assembly == 0)
representative_sp_genome <- NA
representative_sp_genome_accession <- NA
representative_genome_size <- NA
}
output <- list(no_assembly,representative_sp_genome,representative_sp_genome_accession, representative_genome_size)
return(output)
Sys.sleep(1) #
}
genome_info_sp_NIH("Anguilla anguilla")
species[1,]$Scientific_name
species[2,]$Scientific_name
# Loading packages
library(tidyverse)
library(rentrez)
# Loading packages
library(tidyverse)
library(rentrez)
## Loading dataset
```{r message = FALSE, warning = FALSE, echo = TRUE}
species_raw <- read_csv("species_list_test.csv")
#filtering out species with NA
species <- species_raw %>% drop_na()
no_species <- nrow(species) #number of fishes in the list
#Set a small dataset for test procedure
#no_species <- 20 # for test
#species <- species[1:no_species,]
```
## Defining scraping function
```{r message = FALSE, warning = FALSE, echo = TRUE}
#-------------------------------------------------------------------------
#Scraping information of genome-assembly of a target species using rentrez
genome_info_sp_NIH <- function(scientific_name){
scientific_name_vec <- unlist(strsplit(scientific_name,"\\s+"))
species <- scientific_name_vec[1]
genus <- scientific_name_vec[2]
query_species_lab <- paste0(genus," ",species,"[Organism]")
spp_genome_info <- entrez_search(db="assembly", term =query_species_lab)
no_assembly <- spp_genome_info$count
if(no_assembly > 1){
spp_genome_info_list <- entrez_summary(db="assembly", id=spp_genome_info$ids)
for(i in 1:no_assembly){
if(spp_genome_info_list[[i]]$refseq_category=="representative genome"){
representative_sp_genome <- spp_genome_info_list[[i]] #Primary genome-assembly
representative_sp_genome_accession <- spp_genome_info_list[[i]]$assemblyaccession
#extracting genome size info: the object "representative_sp_genome$meta" includes genome size etc.
representative_meta <- unlist(strsplit( representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}
}
}else if(no_assembly == 1){
representative_sp_genome <- entrez_summary(db="assembly", id=spp_genome_info$ids)
representative_sp_genome_accession <- representative_sp_genome$assemblyaccession
#extracting genome size info
representative_meta <- unlist(strsplit(representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}else{#(no_assembly == 0)
representative_sp_genome <- NA
representative_sp_genome_accession <- NA
representative_genome_size <- NA
}
output <- list(no_assembly,representative_sp_genome,representative_sp_genome_accession, representative_genome_size)
return(output)
Sys.sleep(1) #
}
#-------------------------------------------------------------------------
```
## Preparing storages
```{r message = FALSE, warning = FALSE, echo = TRUE}
target_sp_genome_assembly_exist <- vector()
target_sp_genome_size_vec <- vector() # genome size of the target species
related_spp_genome_size_vec <- vector() # mean genome size of related species
No_deposited_sp_level_genome_vec <- vector()
representative_assembly_ID_vec <- vector()
representative_assembly_status_vec <- vector()
representative_contigN50_vec <- vector()
representative_scaffoldN50_vec <- vector()
representative_genome_size_vec <- vector()
## Scraping on GenBank
```{r message = FALSE, warning = FALSE, echo = TRUE}
for(i in 1:no_species){
# split genus/species names
scientific_name <- species[i,]$Scientific_name
genus_name <- genus_species_name[1]
species_name <- genus_species_name[2]
#------------------------------------------
#scraping representative genome using rentrez
rentrez_scraping_out <- genome_info_sp_NIH(scientific_name)
if(rentrez_scraping_out[[1]]>=1){
representative_assembly_ID_vec[i] <- rentrez_scraping_out[[3]]
representative_assembly_status_vec[i] <- rentrez_scraping_out[[2]]$assemblystatus
representative_contigN50_vec[i] <- rentrez_scraping_out[[2]]$contign50
representative_scaffoldN50_vec[i] <- rentrez_scraping_out[[2]]$scaffoldn50
representative_genome_size_vec[i] <- round(rentrez_scraping_out[[4]]/10^6, digits=0)
}else{
representative_assembly_ID_vec[i] <- NA
representative_assembly_status_vec[i] <- NA
representative_contigN50_vec[i] <- NA
representative_scaffoldN50_vec[i] <- NA
representative_genome_size_vec[i] <- NA
}
No_deposited_sp_level_genome_vec[i] <- rentrez_scraping_out[[1]]
}
species_genome <- species %>%
mutate (Genome_size_of_the_species_Mbp = representative_genome_size_vec,
No_assembly_of_the_species = No_deposited_sp_level_genome_vec,
Representative_assembly = representative_assembly_ID_vec,
Representative_assembly_status = representative_assembly_status_vec,
Contig_N50 = representative_contigN50_vec,
Scaffold_N50 = representative_scaffoldN50_vec,
Average_genome_size_of_the_genus_Mbp = ave_genome_size_of_the_genus_vec,
No_species_with_assembly_within_the_genus = no_species_with_assembly_within_the_genus_vec
)
for(i in 1:no_species){
# split genus/species names
scientific_name <- species[i,]$Scientific_name
genus_name <- genus_species_name[1]
species_name <- genus_species_name[2]
#------------------------------------------
#scraping representative genome using rentrez
rentrez_scraping_out <- genome_info_sp_NIH(scientific_name)
if(rentrez_scraping_out[[1]]>=1){
representative_assembly_ID_vec[i] <- rentrez_scraping_out[[3]]
representative_assembly_status_vec[i] <- rentrez_scraping_out[[2]]$assemblystatus
representative_contigN50_vec[i] <- rentrez_scraping_out[[2]]$contign50
representative_scaffoldN50_vec[i] <- rentrez_scraping_out[[2]]$scaffoldn50
representative_genome_size_vec[i] <- round(rentrez_scraping_out[[4]]/10^6, digits=0)
}else{
representative_assembly_ID_vec[i] <- NA
representative_assembly_status_vec[i] <- NA
representative_contigN50_vec[i] <- NA
representative_scaffoldN50_vec[i] <- NA
representative_genome_size_vec[i] <- NA
}
No_deposited_sp_level_genome_vec[i] <- rentrez_scraping_out[[1]]
}
for(i in 1:no_species){
# split genus/species names
scientific_name <- species[i,]$Scientific_name
#------------------------------------------
#scraping representative genome using rentrez
rentrez_scraping_out <- genome_info_sp_NIH(scientific_name)
if(rentrez_scraping_out[[1]]>=1){
representative_assembly_ID_vec[i] <- rentrez_scraping_out[[3]]
representative_assembly_status_vec[i] <- rentrez_scraping_out[[2]]$assemblystatus
representative_contigN50_vec[i] <- rentrez_scraping_out[[2]]$contign50
representative_scaffoldN50_vec[i] <- rentrez_scraping_out[[2]]$scaffoldn50
representative_genome_size_vec[i] <- round(rentrez_scraping_out[[4]]/10^6, digits=0)
}else{
representative_assembly_ID_vec[i] <- NA
representative_assembly_status_vec[i] <- NA
representative_contigN50_vec[i] <- NA
representative_scaffoldN50_vec[i] <- NA
representative_genome_size_vec[i] <- NA
}
No_deposited_sp_level_genome_vec[i] <- rentrez_scraping_out[[1]]
}
species_genome <- species %>%
mutate (Genome_size_of_the_species_Mbp = representative_genome_size_vec,
No_assembly_of_the_species = No_deposited_sp_level_genome_vec,
Representative_assembly = representative_assembly_ID_vec,
Representative_assembly_status = representative_assembly_status_vec,
Contig_N50 = representative_contigN50_vec,
Scaffold_N50 = representative_scaffoldN50_vec,
Average_genome_size_of_the_genus_Mbp = ave_genome_size_of_the_genus_vec,
No_species_with_assembly_within_the_genus = no_species_with_assembly_within_the_genus_vec
)
species_genome <- species %>%
mutate (Genome_size_of_the_species_Mbp = representative_genome_size_vec,
No_assembly_of_the_species = No_deposited_sp_level_genome_vec,
Representative_assembly = representative_assembly_ID_vec,
Representative_assembly_status = representative_assembly_status_vec,
Contig_N50 = representative_contigN50_vec,
Scaffold_N50 = representative_scaffoldN50_vec
)
species_genome <- species %>%
mutate (Genome_size_of_the_species_Mbp = representative_genome_size_vec,
No_assembly_of_the_species = No_deposited_sp_level_genome_vec,
Representative_assembly = representative_assembly_ID_vec,
Representative_assembly_status = representative_assembly_status_vec,
Contig_N50 = representative_contigN50_vec,
Scaffold_N50 = representative_scaffoldN50_vec
)
## Write a result file
```{r message = FALSE, warning = FALSE, echo = TRUE}
species_genome
representative_genome_size_vec
species[1:4,]$Scientific_name
aa <- species[1:4,]$Scientific_name
aa[1]
aa[2]
genome_info_sp_NIH(aa[1])
aa[1]
unlist(strsplit(aa[1],"\\s+"))
aaaa <- unlist(strsplit(aa[1],"\\s+"))
aaaa[1]
aaaa[2]
aaaa[1]
aa[1]
str(aa[1])
#-------------------------------------------------------------------------
#Scraping information of genome-assembly of a target species using rentrez
genome_info_sp_NIH <- function(scientific_name){
scientific_name_vec <- unlist(strsplit(scientific_name,"\\s+"))
species <- scientific_name_vec[1]
genus <- scientific_name_vec[2]
query_species_lab <- paste0(genus," ",species,"[Organism]")
spp_genome_info <- entrez_search(db="assembly", term =query_species_lab)
no_assembly <- spp_genome_info$count
if(no_assembly > 1){
spp_genome_info_list <- entrez_summary(db="assembly", id=spp_genome_info$ids)
for(i in 1:no_assembly){
if(spp_genome_info_list[[i]]$refseq_category=="representative genome"){
representative_sp_genome <- spp_genome_info_list[[i]] #Primary genome-assembly
representative_sp_genome_accession <- spp_genome_info_list[[i]]$assemblyaccession
#extracting genome size info: the object "representative_sp_genome$meta" includes genome size etc.
representative_meta <- unlist(strsplit( representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}
}
}else if(no_assembly == 1){
representative_sp_genome <- entrez_summary(db="assembly", id=spp_genome_info$ids)
representative_sp_genome_accession <- representative_sp_genome$assemblyaccession
#extracting genome size info
representative_meta <- unlist(strsplit(representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}else{#(no_assembly == 0)
representative_sp_genome <- NA
representative_sp_genome_accession <- NA
representative_genome_size <- NA
}
output <- list(no_assembly,representative_sp_genome,representative_sp_genome_accession, representative_genome_size)
return(output)
Sys.sleep(1) #
}
genome_info_sp_NIH(aa[2])
genome_info_sp_NIH(aa[1])
genome_info_sp_NIH("Anguilla anguilla")
aa[1]
unlist(strsplit(aa[1],"\\s+"))
unlist(strsplit(aa[1],"\\s+"))[1]
unlist(strsplit(aa[1],"\\s+"))[2]
unlist(strsplit(aa[1],"\\s+"))[[1]]
unlist(strsplit(aa[1],"\\s+"))[[2]]
genome_info_sp_NIH("Anguilla japonica Temminck & Schlegel 1846")
genome_info_sp_NIH("Anguilla japonica Temminck & Schlegel 1846")
#-------------------------------------------------------------------------
#Scraping information of genome-assembly of a target species using rentrez
genome_info_sp_NIH <- function(scientific_name){
scientific_name_vec <- unlist(strsplit(scientific_name,"\\s+"))
species <- scientific_name_vec[1]
genus <- scientific_name_vec[2]
browser()
query_species_lab <- paste0(genus," ",species,"[Organism]")
spp_genome_info <- entrez_search(db="assembly", term =query_species_lab)
no_assembly <- spp_genome_info$count
if(no_assembly > 1){
spp_genome_info_list <- entrez_summary(db="assembly", id=spp_genome_info$ids)
for(i in 1:no_assembly){
if(spp_genome_info_list[[i]]$refseq_category=="representative genome"){
representative_sp_genome <- spp_genome_info_list[[i]] #Primary genome-assembly
representative_sp_genome_accession <- spp_genome_info_list[[i]]$assemblyaccession
#extracting genome size info: the object "representative_sp_genome$meta" includes genome size etc.
representative_meta <- unlist(strsplit( representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}
}
}else if(no_assembly == 1){
representative_sp_genome <- entrez_summary(db="assembly", id=spp_genome_info$ids)
representative_sp_genome_accession <- representative_sp_genome$assemblyaccession
#extracting genome size info
representative_meta <- unlist(strsplit(representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}else{#(no_assembly == 0)
representative_sp_genome <- NA
representative_sp_genome_accession <- NA
representative_genome_size <- NA
}
output <- list(no_assembly,representative_sp_genome,representative_sp_genome_accession, representative_genome_size)
return(output)
Sys.sleep(1) #
}
genome_info_sp_NIH("Anguilla japonica Temminck & Schlegel 1846"")
genome_info_sp_NIH("Anguilla japonica Temminck & Schlegel 1846")
species
genus
pp_genome_info
spp_genome_info
#-------------------------------------------------------------------------
#Scraping information of genome-assembly of a target species using rentrez
genome_info_sp_NIH <- function(scientific_name){
scientific_name_vec <- unlist(strsplit(scientific_name,"\\s+"))
species <- scientific_name_vec[2]
genus <- scientific_name_vec[2]
query_species_lab <- paste0(genus," ",species,"[Organism]")
spp_genome_info <- entrez_search(db="assembly", term =query_species_lab)
no_assembly <- spp_genome_info$count
if(no_assembly > 1){
spp_genome_info_list <- entrez_summary(db="assembly", id=spp_genome_info$ids)
for(i in 1:no_assembly){
if(spp_genome_info_list[[i]]$refseq_category=="representative genome"){
representative_sp_genome <- spp_genome_info_list[[i]] #Primary genome-assembly
representative_sp_genome_accession <- spp_genome_info_list[[i]]$assemblyaccession
#extracting genome size info: the object "representative_sp_genome$meta" includes genome size etc.
representative_meta <- unlist(strsplit( representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}
}
}else if(no_assembly == 1){
representative_sp_genome <- entrez_summary(db="assembly", id=spp_genome_info$ids)
representative_sp_genome_accession <- representative_sp_genome$assemblyaccession
#extracting genome size info
representative_meta <- unlist(strsplit(representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}else{#(no_assembly == 0)
representative_sp_genome <- NA
representative_sp_genome_accession <- NA
representative_genome_size <- NA
}
output <- list(no_assembly,representative_sp_genome,representative_sp_genome_accession, representative_genome_size)
return(output)
Sys.sleep(1) #
}
#-------------------------------------------------------------------------
#Scraping information of genome-assembly of a target species using rentrez
genome_info_sp_NIH <- function(scientific_name){
scientific_name_vec <- unlist(strsplit(scientific_name,"\\s+"))
genus <- scientific_name_vec[1]
species <- scientific_name_vec[2]
query_species_lab <- paste0(genus," ",species,"[Organism]")
spp_genome_info <- entrez_search(db="assembly", term =query_species_lab)
no_assembly <- spp_genome_info$count
if(no_assembly > 1){
spp_genome_info_list <- entrez_summary(db="assembly", id=spp_genome_info$ids)
for(i in 1:no_assembly){
if(spp_genome_info_list[[i]]$refseq_category=="representative genome"){
representative_sp_genome <- spp_genome_info_list[[i]] #Primary genome-assembly
representative_sp_genome_accession <- spp_genome_info_list[[i]]$assemblyaccession
#extracting genome size info: the object "representative_sp_genome$meta" includes genome size etc.
representative_meta <- unlist(strsplit( representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}
}
}else if(no_assembly == 1){
representative_sp_genome <- entrez_summary(db="assembly", id=spp_genome_info$ids)
representative_sp_genome_accession <- representative_sp_genome$assemblyaccession
#extracting genome size info
representative_meta <- unlist(strsplit(representative_sp_genome$meta,"> <"))
representative_genome_size_raw <- representative_meta[which(str_detect(representative_meta, pattern="total_length"))]
representative_genome_size <- as.numeric(str_extract_all(representative_genome_size_raw, "[0-9.]+"))
}else{#(no_assembly == 0)
representative_sp_genome <- NA
representative_sp_genome_accession <- NA
representative_genome_size <- NA
}
output <- list(no_assembly,representative_sp_genome,representative_sp_genome_accession, representative_genome_size)
return(output)
Sys.sleep(1) #
}
## Preparing storages
#-------------------------------------------------------------------------
```
```{r message = FALSE, warning = FALSE, echo = TRUE}
target_sp_genome_assembly_exist <- vector()
target_sp_genome_size_vec <- vector() # genome size of the target species
related_spp_genome_size_vec <- vector() # mean genome size of related species
No_deposited_sp_level_genome_vec <- vector()
representative_assembly_ID_vec <- vector()
representative_assembly_status_vec <- vector()
representative_contigN50_vec <- vector()
representative_scaffoldN50_vec <- vector()
representative_genome_size_vec <- vector()
## Scraping on GenBank
```{r message = FALSE, warning = FALSE, echo = TRUE}
for(i in 1:no_species){
# split genus/species names
scientific_name <- species[i,]$Scientific_name
#------------------------------------------
#scraping representative genome using rentrez
rentrez_scraping_out <- genome_info_sp_NIH(scientific_name)
if(rentrez_scraping_out[[1]]>=1){
representative_assembly_ID_vec[i] <- rentrez_scraping_out[[3]]
representative_assembly_status_vec[i] <- rentrez_scraping_out[[2]]$assemblystatus
representative_contigN50_vec[i] <- rentrez_scraping_out[[2]]$contign50
representative_scaffoldN50_vec[i] <- rentrez_scraping_out[[2]]$scaffoldn50
representative_genome_size_vec[i] <- round(rentrez_scraping_out[[4]]/10^6, digits=0)
}else{
representative_assembly_ID_vec[i] <- NA
representative_assembly_status_vec[i] <- NA
representative_contigN50_vec[i] <- NA
representative_scaffoldN50_vec[i] <- NA
representative_genome_size_vec[i] <- NA
}
No_deposited_sp_level_genome_vec[i] <- rentrez_scraping_out[[1]]
}
for(i in 1:no_species){
# split genus/species names
scientific_name <- species[i,]$Scientific_name
#------------------------------------------
#scraping representative genome using rentrez
rentrez_scraping_out <- genome_info_sp_NIH(scientific_name)
if(rentrez_scraping_out[[1]]>=1){
representative_assembly_ID_vec[i] <- rentrez_scraping_out[[3]]
representative_assembly_status_vec[i] <- rentrez_scraping_out[[2]]$assemblystatus
representative_contigN50_vec[i] <- rentrez_scraping_out[[2]]$contign50
representative_scaffoldN50_vec[i] <- rentrez_scraping_out[[2]]$scaffoldn50
representative_genome_size_vec[i] <- round(rentrez_scraping_out[[4]]/10^6, digits=0)
}else{
representative_assembly_ID_vec[i] <- NA
representative_assembly_status_vec[i] <- NA
representative_contigN50_vec[i] <- NA
representative_scaffoldN50_vec[i] <- NA
representative_genome_size_vec[i] <- NA
}
No_deposited_sp_level_genome_vec[i] <- rentrez_scraping_out[[1]]
}
species_genome <- species %>%
mutate (Genome_size_of_the_species_Mbp = representative_genome_size_vec,
No_assembly_of_the_species = No_deposited_sp_level_genome_vec,
Representative_assembly = representative_assembly_ID_vec,
Representative_assembly_status = representative_assembly_status_vec,
Contig_N50 = representative_contigN50_vec,
Scaffold_N50 = representative_scaffoldN50_vec
)
write_csv(species_genome, "test_out.csv")
